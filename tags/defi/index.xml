<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Defi on Nillnum</title>
        <link>http://localhost:1313/tags/defi/</link>
        <description>Recent content in Defi on Nillnum</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Nillnum</copyright>
        <lastBuildDate>Thu, 08 Aug 2024 16:18:10 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/defi/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Uniswap V3 升级概述</title>
        <link>http://localhost:1313/p/uniswap-v3-%E5%8D%87%E7%BA%A7%E6%A6%82%E8%BF%B0/</link>
        <pubDate>Thu, 08 Aug 2024 16:18:10 +0800</pubDate>
        
        <guid>http://localhost:1313/p/uniswap-v3-%E5%8D%87%E7%BA%A7%E6%A6%82%E8%BF%B0/</guid>
        <description>&lt;h1 id=&#34;主要更新点&#34;&gt;主要更新点
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;分不同价格区间提供流动性&lt;/li&gt;
&lt;li&gt;提供多个收费层级&lt;/li&gt;
&lt;li&gt;高级预言机&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;价格区间提供流动性&#34;&gt;价格区间提供流动性
&lt;/h1&gt;&lt;p&gt;V3 采用了一种新的方式给用户进行流动性的区间选择提供：对于&lt;code&gt;ETH/DAI&lt;/code&gt;池可以选择将 100 美元价值的代币分配给 1,000-2,000 美元的价格区间，并将另外 50 美元价值的代币分配给 1,500-1,750 美元的区间。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用户选择投入流动性到 1,000-2,000 美元的价格区间，那么只有价格在此范围内进行的交易产生的手续费，用户才有资格得到。因此用户需要选择交易最经常发生的价格区间才能获得最大的收益&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如此做法带来了什么好处呢？最直接是资金的利用率提升了：过去 V2 中池子中有部分不合理的价格也被强制分配了一部分流动性（如 &lt;code&gt;1 eth = 0.1$&lt;/code&gt;或者&lt;code&gt;1 eth = 10^18$&lt;/code&gt;），这无疑是对池子的资金的浪费，V3 通过用户指定流动性提供区间，提高了这个利用率（如果用户非要选择离谱的区间那用户就没办法获得手续费，毕竟那些区间没有交易产生）。&lt;/p&gt;
&lt;p&gt;采用这种区间的方法就需要修改一些原本 V2 的设计了：首先就是 LP token。&lt;/p&gt;
&lt;p&gt;在 V2 中采用的是 ERC20 代币作为 LP token，因为所有流动性添加用户添加的流动性是等价的（大家都是在零到正无穷这个区间添加流动性）。而到了 V3 就很明显的不一样了：每个用户选择的区间并不一定一样（也可以一样，但这种情况应该少数，即使是某些池子中大多一样，那也不影响），所以它们获得 LP token 无法等价起来，故采用 ERC721 来记录流动性提供者投入的流动性，而这个 LP token 也被称为&lt;strong&gt;头寸&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于用户选择的区间和当前池子的价格之间的大小关系不同，有不同的投入要求（此处假设价格点连续）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;价格大于区间：假设此时：&lt;code&gt;1Y = 10X&lt;/code&gt;，提供者选择的区间为：&lt;code&gt;1：20&lt;/code&gt;、&lt;code&gt;1：30&lt;/code&gt;，那么此时想添加流动性，就只能添加代币&lt;code&gt;X&lt;/code&gt;。（可以理解为认为&lt;code&gt;X&lt;/code&gt;币会跌/&lt;code&gt;Y&lt;/code&gt;币会涨，设置一个订单，在此范围内逐渐卖出/买入代币，当然前提是超出你设置的区间后及时取回流动性，不然随着价格回来又会转换回来）&lt;/li&gt;
&lt;li&gt;价格在区间内：假设此时：&lt;code&gt;1Y = 10X&lt;/code&gt;，提供者选择的区间为：&lt;code&gt;1：5&lt;/code&gt;、&lt;code&gt;1：20&lt;/code&gt;，那么此时想添加流动性，需要同时注入两种代币&lt;/li&gt;
&lt;li&gt;价格小于区间：假设此时：&lt;code&gt;1Y = 10X&lt;/code&gt;，提供者选择的区间为：&lt;code&gt;1：5&lt;/code&gt;、&lt;code&gt;1：7&lt;/code&gt;，那么此时想添加流动性，就只能添加代币&lt;code&gt;Y&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其次的设计就是区间：区间的选择不能无限制，作为链上合约，实现不了这么复杂的事情。&lt;/p&gt;
&lt;p&gt;V3 在价格这一射线上选择一系列不连续的价格点作为可以选择形成区间，这些价格点称为&lt;code&gt;tick&lt;/code&gt;，以此来减少计算关于流动性的计算，然后还设置了&lt;code&gt;tickspacing&lt;/code&gt;这一存在，要求两个&lt;code&gt;tick&lt;/code&gt;之间存在&lt;code&gt;tickspacing&lt;/code&gt;个&lt;code&gt;tick&lt;/code&gt;，而在 V3 中锁定唯一的代币对池子，需要通过：两种代币、&lt;code&gt;tickspacing&lt;/code&gt;这三个参数。&lt;code&gt;tick&lt;/code&gt;的大小是如何设置的呢？&lt;code&gt;tick&lt;/code&gt;本身是一个等幂数列 $p_i= {1.0001}^i$ ，其 i 的取值有范围&lt;code&gt;[-887272, 887272]&lt;/code&gt;。这使得在接&lt;code&gt;0-1&lt;/code&gt;的时候能提供一个很密集的&lt;code&gt;tick&lt;/code&gt;（很适合如稳定币对），远离 1 的时候能提供较分散的&lt;code&gt;tick&lt;/code&gt;给价格波动大的兑换合约（如两个山寨币对）。&lt;/p&gt;
&lt;h1 id=&#34;多收费层级&#34;&gt;多收费层级
&lt;/h1&gt;&lt;p&gt;V3 新增的多收费层级就是指不同档次的手续费，V2 中所有代币对合约的手续费统一&lt;code&gt;0.3%&lt;/code&gt;，这对于某些合约（稳定币对合约）收费太高，某些合约（山寨币对合约）收费低了些（币价波动大，很容易贬值）。V3 就因此设置了不同的手续费档次。&lt;/p&gt;
&lt;p&gt;不同的收费层级通过前面所讲的&lt;code&gt;tickspacing&lt;/code&gt;结合决定：手续费低，则币价相对稳定，&lt;code&gt;tickspacing&lt;/code&gt;小；反之手续费高，币价波动大，&lt;code&gt;tickspacing&lt;/code&gt;大。具体设置如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;费率&lt;/th&gt;
&lt;th&gt;tickspacing&lt;/th&gt;
&lt;th&gt;建议的使用范围&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0.05%&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;稳定币交易对&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0.3%&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;td&gt;适用大多数交易对&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1%&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;波动极大的交易对&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;在 V3 合约实现的时候为&lt;code&gt;tickspacing&lt;/code&gt;扩充留下了代码，可以后续添加。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;高级预言机&#34;&gt;高级预言机
&lt;/h1&gt;&lt;p&gt;V3 中提出一个新的计算平均价格的方法，与 V2 的预言机有所不同，但总体思路还是相近的。&lt;/p&gt;
&lt;p&gt;在 V3 中&lt;code&gt;tick&lt;/code&gt;的计算为$p_i= {1.0001}^i$，所以$i = \log _{1.0001} p_i$&lt;/p&gt;
&lt;p&gt;V3 中计算的不再是价格累积值而是&lt;code&gt;tick&lt;/code&gt;累积值，所以$a_j = a_{j-1} + \Delta t * i$，其中 i 就是上面&lt;code&gt;tick&lt;/code&gt;中指代的那个 i 。当我们计算平均价格时&lt;/p&gt;
&lt;p&gt;$$
P_{t1,t2} = \frac{a_{t2} - a_{t1}}{t2 - t1} = \frac{\sum_{i =t1}^{t2}\log_{1.0001}P_i}{t2 - t1}=\log_{1.0001}{(\Pi _{i = t2}^{t_2} P_i)^{\frac{1}{t2 - t1}}}
$$&lt;/p&gt;
&lt;p&gt;最后面那一步转换便称为价格 的几何平均值形式（数学不好，没能理解这个转换）。剩下的计算和 V2 也很相似了&lt;/p&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.web3idea.xyz/post/blockchain%2Fdefi%2FUniswap-v3%E8%AF%A6%E8%A7%A3%28%E4%BA%94%29:Oracle%E9%A2%84%E8%A8%80%E6%9C%BA#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%87%A0%E4%BD%95%E5%B9%B3%E5%9D%87%E5%80%BC&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Uniswap v3 详解（五）：Oracle 预言机&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/defi/Uniswap-V3/whitepaperGuide/understandV3Witepaper.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Understand UniswapV3 whitepaper&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
